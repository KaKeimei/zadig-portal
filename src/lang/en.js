'use strict'

exports.__esModule = true
exports.default = {
  global: {
    add: 'Add',
    create: 'Create',
    update: 'Update',
    copy: 'Copy',
    edit: 'Edit',
    delete: 'Delete',
    validate: 'Validate',
    confirm: 'Confirm',
    cancel: 'Cancel',
    save: 'Save',
    refresh: 'Refresh',
    creator: 'Creator',
    operation: 'Operation',
    successfullySaved: 'Successfully saved',
    helpDoc: 'help',
    desc: 'Description',
    type: 'Type',
    var: 'Variables',
    name: 'Name',
    tips: 'Tips',
    status: 'Status',
    serviceName: 'Service Name',
    realTimeLog: 'Real Time Log',
    inputDesc: 'Please input description',
    loading: 'Loading...',
    project: 'Project',
    workflow: 'Workflow',
    workflowName: 'workflowName',
    workflowID: 'workflowID',
    number: 'Number',
    whetherToDisplay: 'Whether To Display',
    addConfig: 'Add Config',
    pleaseInput: 'Please Input',
    pleaseSelect: 'Please Select',
    timeout: 'Timeout',
    all: 'All',
    key: 'Key',
    value: 'Value',
    fileDirectory: 'File Directory',
    testName: 'Test Name',
    repository: 'Repository',
    gitMessage: 'Repository Info',
    errorMsg: 'Error Message',
    ok: 'ok',
    startTime: 'Start Time',
    endTime: 'End Time',
    execute: 'Run',
    confirmation: 'Confirm',
    emptyText: 'Empty'
  },
  permission: {
    lackPermission: 'Unauthorized'
  },
  login: {
    username: 'Username',
    password: 'Password',
    mail: 'mail',
    inputUsername: 'Please input username',
    inputPass: 'Please input password',
    inputMail: 'Please input mail',
    inputMailCheck: 'Please check the email format',
    inputUserInfo: 'Please input user info',
    inputNewPass: 'Please input new password',
    inputNewPassAgain: 'Please input new password again',
    passwordDontMatch: "Password don't match!",
    passwordLength: 'Password should be no less than 8 characters',
    signIn: 'Sign in',
    signUp: 'Sign up',
    forgotPassword: 'Forgot password',
    resetPassword: 'Reset password',
    resetSuccess: 'Reset successfully',
    confirmReset: 'Confirm reset',
    next: 'Next',
    resetLinkTip: 'The password reset link has been sent to your registered email address',
    setNewPassword: 'Set new password',
    sloganTitle: 'Let engineers focus more on creating',
    sloganDesc: 'The cloud-native continuous delivery platform engineers love: with important features such as flexible and easy-to-use high concurrency workflow, developer-oriented cloud-native environment, efficient and collaborative test management, powerful and maintenance-free template library, objective and accurate performance insights, and cloud-native IDE plugins to provide a unified collaboration plane for engineers.',
    companyInfo: 'KodeRover Technology Co., Ltd.'
  },
  signUp: {
    username: 'Username',
    password: 'Password',
    mail: 'mail',
    nickname: 'Nickname',
    inputUsername: 'Please input username',
    inputPass: 'Please input password',
    inputNickname: 'Please input nickname',
    inputMail: 'Please input mail',
    inputMailCheck: 'Please check the email format',
    inputUserInfo: 'Please input user info',
    signUp: 'Sign up',
    signUpSuccess: 'Registration is successful, please login'
  },
  sidebarMenu: {
    productDelivery: 'Product Delivery',
    status: 'Status',
    projects: 'Projects',
    forum: 'Forum',
    testCenter: 'Tests',
    deliveryCenter: 'Delivery',
    dataViews: 'Data Views',
    dataOverview: 'Overview',
    dataInsight: 'Insights',
    setting: 'Settings',
    sysSetting: 'System Setting',
    integration: 'Integrations',
    systemIntegration: 'Integrations',
    packages: 'Packages',
    images: 'Images',
    plugins: 'Plugins',
    infraIntegration: 'Infrastructure',
    dockerRegistry: 'Registry',
    objectStorage: 'Storage',
    helmRepo: 'HELM Repo',
    clusters: 'Clusters',
    hosts: 'Hosts',
    system: 'System',
    settings: 'Settings',
    users: 'Users',
    announcement: 'Announcement',
    auditLog: 'Audit Log',
    profile: 'Profile',
    preference: 'Preference',
    enterprise: 'Enterprise',
    enterpriseInfo: 'Enterprise Info',
    license: 'License',
    releaseCenter: 'Release',
    releaseWorkflows: 'Workflows',
    environmentGroups: 'Environments',
    customerDelivery: 'Customer Delivery',
    deliveryBoard: 'Board',
    deliveryVersion: 'Version',
    deliveryCustomers: 'Customers'
  },
  topbarMenu: {
    search: 'Search',
    username: 'Username',
    admin: 'Admin',
    user: 'User',
    users: 'Users',
    sysSetting: 'System Setting',
    enterprise: 'Enterprise',
    profile: 'Profile',
    signOut: 'Sign Out'
  },
  subTopbarMenu: {
    workflows: 'Workflows',
    environments: 'Environments',
    services: 'Services',
    builds: 'Builds',
    tests: 'Tests',
    codeScanner: 'Code Scanning',
    versions: 'Versions',
    createWorkflow: 'Create Workflow',
    createEnvironment: 'Create Env',
    createBuild: 'Create Build',
    createTest: 'Create Test',
    createScanner: 'Create Scanner',
    createVersion: 'Create Version',
    changeProjectType: 'Change project type',
    projectConfig: 'Config',
    editProject: 'Edit',
    hostManagement: 'Hosts',
    projectPermission: 'Permission',
    projectCollaborationMode: 'Collaboration Mode',
    varsGroup: 'Vars Group',
    changeProjectTypeFirstTip: 'Change from "Hosting Projects" to "K8s YAML Projects" and confirm the resources within the project',
    changeProjectTypeSecondTip: '1. Existing project resources will not change, new service management capabilities will be added',
    changeProjectTypeThirdTip: '2. All services in the hosted project will be included in the service management and the associated workloads in the environment will be configured as services',
    changeProjectTypeFourthTip: '3. Changing operation is irreversible, please operate with caution',
    changeProjectTypeConfirm: 'Are you sure to change project type?',
    changeProjectTypeSuccess: 'Type changed successfully!',
    cancelChangeProjectType: 'Change project type has been cancelled'
  },
  profile: {
    profile: 'Profile',
    changePassword: 'Change Password',
    oldPassword: 'Old password',
    newPassword: 'New password',
    confirmNewPassword: 'Confirm new password',
    changeMail: 'Change Mail',
    oldMail: 'Old mail',
    newMail: 'New mail',
    inputMail: 'Please input enterprise mail',
    pleaseCheckMail: 'Please check the email format',
    changePhone: 'Change Phone',
    oldPhone: 'Old phone',
    newPhone: 'New phone',
    inputPhone: 'Please input phone',
    pleaseCheckPhone: 'Please check the phone format',
    admin: 'Admin',
    user: 'User',
    lastAccessedOn: 'Last accessed on',
    source: 'Source',
    system: 'System',
    updatePassword: 'Update password',
    updateMail: 'Update mail',
    updatePhone: 'Update phone',
    clickToChange: 'Click to change',
    notificationSetting: 'Notification setting',
    workflowStatusChanged: 'Workflow status changed',
    inputNewPass: 'Please input new password',
    inputOldPass: 'Please input old password',
    inputNewPassAgain: 'Please input new password again',
    passwordDontMatch: "Password don't match!",
    copiedToClipboard: 'Copied to clipboard',
    copyFailed: 'Copy failed',
    passwordChangedSuccessfully: 'Password changed successfully',
    mailChangedSuccessfully: 'Mail changed successfully',
    phoneChangedSuccessfully: 'Phone changed successfully',
    notificationSettingSavedSuccessfully: 'Notification setting saved successfully',
    uiTheme: 'UI theme',
    logColor: 'Log color',
    backgroundColor: 'Background',
    fontColor: 'Font color',
    defaultTheme: 'Defaut theme',
    darkTheme: 'Dark theme',
    inputColorHex: 'Please input color hex',
    checkColorHex: 'Please check color hex',
    preferenceChangedSuccessfully: 'Preference changed successfully'
  },
  status: {
    noRunningTask: 'No running tasks ',
    productWorkflow: 'Product Workflow',
    workflow: 'Workflow',
    codeScanner: 'Code Scanner',
    viewTaskDetail: 'View task detail',
    hideTaskDetail: 'Hide task detail',
    deleteTask: 'Delete task',
    build: 'Build',
    unitTest: 'Unit Test',
    coverage: 'Coverage',
    branch: 'Branch',
    buildInfo: 'Build Info',
    scriptBuilding: 'Runing Script',
    imgInfo: 'Image',
    imgBuilding: 'Build Image',
    deploy: 'Deploy',
    updateEnv: 'Update Environment',
    service: 'Service',
    env: 'Environment',
    image: 'Image',
    test: 'Test',
    testReport: 'Test Report',
    distribute: 'Distribute',
    distributeImage: 'Distribute Image',
    imageRepo: 'Image Repo',
    imageName: 'Image Name',
    queued: 'Queued',
    success: 'Success',
    cancelQueuedTaskSuccess: 'Queued task cancellation success',
    cancelRunningTaskSuccess: 'Running task cancellation success',
    buildStatus: 'Status',
    deployStatus: 'Status'
  },
  project: {
    searchProject: 'Search Project',
    newProject: 'New project',
    templates: 'Templates',
    buildTemplate: 'Build',
    workflowTemplate: 'Workflow',
    editProject: 'Edit',
    deleteProject: 'Delete',
    privateProject: 'Private project',
    workflows: 'Workflows',
    environments: 'Environments',
    tests: 'Tests',
    services: 'Services',
    builds: 'Builds',
    codeScanner: 'Code Scanner',
    versions: 'Versions',
    artifacts: 'Artifacts',
    clusters: 'Clusters',
    noProjects: 'There is no item to show, please add',
    projectName: 'Name',
    environmentCounts: 'Environments',
    environmentsList: 'Environments',
    workflowsList: 'Workflows',
    workflowStage: 'Stages',
    lastUpdated: 'Last Updated',
    clusterInfo: 'Cluster',
    localCluster: 'Local',
    updates: 'Updates',
    projectDetail: 'Detail',
    createProjectComp: {
      projectIdentifier: 'Identifier',
      projectIdentifierTip: "The project identifier is a globally unique identifier of the project's resources, used for referencing and updating all resources under the project,automatically generated by default, supports manual editing, can't be changed after creation",
      type: 'Type',
      yamlProject: 'K8s YAML Project',
      yamlProjectFirstDesc: 'Kubernetes',
      yamlProjectSecondDesc: 'Managing and Deploying Services with Kubernetes YAML',
      helmProject: 'K8s Helm Chart Project',
      helmProjectFirstDesc: 'Kubernetes',
      helmProjectSecondDesc: 'Manage and deploy services with Helm Chart',
      hostingProject: 'K8s Hosting Project',
      hostingProjectFirstDesc: 'Hosting resources in existing Kubernetes clusters',
      hostingProjectSecondDesc: 'Service image updates are supported',
      hostsProject: 'Hosts Projects',
      hostsProjectFirstDesc: 'Using the cloud host',
      hostsProjectSecondDesc: 'Deploy and upgrade services using custom scripts',
      compatibility: 'Compatibility',
      advancedConfigurations: 'Advanced Configurations',
      accessPermission: 'Access',
      projectAdministrator: 'Administrator',
      private: 'Private',
      privateDesc: 'The project is not visible to normal users by default, project administrators can add members and configure the appropriate permissions.',
      public: 'Public',
      publicDesc: 'Users have public access by default to view workflows, environments, services, builds, tests, and other resources in the project.',
      inputUsernameToSearch: 'Please input name to search',
      selectCluster: 'Please select clusters',
      specifiedCluster: 'Clusters',
      confirmUpdate: 'Update',
      createNow: 'Create',
      inputProjectName: 'Please input project name',
      selectProjectAdmin: 'Please select project administrator',
      selectProjectAccessPermission: 'Please select permission',
      inputProjectIdentifier: 'Please input project identifier',
      inputProjectIdentifierCheck: 'Only lowercase letters and numbers are supported, and hyphens are supported in special characters',
      successfullySaved: 'Projects have been successfully created',
      successfullyUpdated: 'Projects have been successfully updated',
      createProject: 'Create Project',
      editProjectInfo: 'Edit Project'
    },
    deleteProjectComp: {
      inputProjectNameToDelete: 'Please input project name {projectName} to confirm',
      deleteExternalProjectTip: 'The following resources under this project will be unhosted,',
      deleteProjectTip: 'The following resources under this project will be deleted at the same time,',
      deleteProjectCaution: 'Please proceed with caution !!',
      deleteK8sNamespace: 'Delete the K8s namespace and services',
      projectNameDontMatch: 'Project name does not match',
      successfullyDeleted: 'Projects have been successfully deleted'
    }
  },
  templates: {
    k8sYaml: {
      noTemplate: 'No template,click to',
      createTemplate: 'create template',
      createTemplateTooltip: 'Create template',
      selectTemplateToEdit: 'Please select the template you want to edit',
      inputTemplateName: 'Please input template name',
      searchTemplate: 'Search template',
      templateNameIsDuplicated: 'Template name is duplicate with existing names',
      confirm: 'Confirm',
      confirmToDeleteTemplate: 'Are you sure to delete template {name}?',
      successfullyDeleted: 'Template has been successfully deleted',
      tip: 'Tip',
      confirmToSaveTemplate: 'The template is not saved, do you need to save it?',
      variablesList: 'Variables List',
      referenceList: 'Reference List',
      projectName: 'Project Name',
      systemVariables: 'System Variables',
      customVariables: 'Custom Variables',
      customVariablesTooltip: 'Custom variables are declared with {{.key}}',
      noneVariable: 'None',
      saveTemplateFirst: 'Please save the template first',
      validationSuccess: 'Validation is successful',
      successfullySaved: 'Variables have been successfully saved',
      applyToServices: 'Apply to services',
      successfullyUpdated: 'Template "{fileName}" has been successfully updated',
      successfullyCreated: 'Template "{fileName}" has been successfully created',
      applyToServicesTooltip: 'All services with "Auto Sync" enabled will apply the latest template.',
      confirmToApply: 'Confirm to apply',
      applyToServicesSuccessfully: 'Apply to services successfully'
    },
    helmChart: {},
    dockerfile: {},
    build: {}
  },
  workflowTaskStatus: {
    notRunning: 'Not running',
    created: 'Created',
    waiting: 'Waiting',
    running: 'Running',
    failed: 'Failed',
    passed: 'Passed',
    timeout: 'Timeout',
    cancelled: 'Cancelled',
    blocked: 'Blocked',
    queued: 'Queued',
    skipped: 'Skipped',
    prepare: 'Preparing',
    reject: 'Rejected'
  },
  workflow: {
    ascendingByName: 'Ascending by name',
    descendingByName: 'Descending by name',
    ascendingByCreationTime: 'Ascending by creation time',
    descendingByCreationTime: 'Descending by creation time',
    addView: 'Add View',
    editView: 'Edit View',
    delView: 'Delete View',
    searchWorkflow: 'Search Workflow',
    noWorkflow: 'There is currently no workflow to display, please create a new workflow manually',
    productWorkflow: 'Product Workflow',
    productWorkflowAbility: 'Capable of building, deploying, testing, and delivering versions with modular assembly',
    customWorkflow: 'Custom Workflow',
    customWorkflowAbility: 'Customizable workflow steps and free execution order',
    releaseWorkflow: 'Release Workflow',
    releaseWorkflowAbility: 'The release process can be freely arranged, with the capabilities of blue-green, canary, grayscale release, etc',
    chooseWorkflowType: 'Choose Workflow Type',
    runProductWorkflow: 'Run Product Workflow',
    runWorkflow: 'Run Workflow',
    viewName: 'View Name',
    inputViewName: 'Please input view name',
    selectWorkflow: 'Select Workflow',
    addEmptyWorkflow: 'Create a new blank workflow',
    use: 'Use',
    customWorkflowTemplate: 'Custom Workflow Template',
    releaseWorkflowTemplate: 'Release Workflow Template',
    builtInTemplate: 'Built-in Template',
    selectTemplate: 'Select Template',
    delWorkflow: 'Delete Workflow',
    confirmWorkflowName: 'Confirm Workflow Name',
    delSuccess: 'Delete Success',
    inputWorkflowName: 'Please input workflow name',
    nameMismatch: 'workflow name mismatch',
    cancelDel: 'Cancel Delete Workflow',
    newWorkflowName: 'New Workflow Name',
    newWorkflowID: 'New Workflow ID',
    copyWorkflow: 'Copy Workflow',
    cancelCopyWorkflow: 'Cancel Copy Workflow',
    copyWorkflowSuccess: 'Copy Workflow Success',
    duplicateWorkflowName: 'Duplicate Workflow Name',
    addSuccess: 'Add Success',
    updateSuccess: 'Update Success',
    delScuuess: 'Delete Success',
    run: 'Run',
    noAuth: 'Operation without permission',
    close: 'Close',
    open: 'Open',
    timer: 'Timer',
    timerOpenSuccess: 'Timer Open Success',
    timerCloseSuccess: 'Timer Close Success',
    inputWorkflowID: 'Please Input Workflow ID',
    customWorkflowTag: 'Custom',
    releaseWorkflowTag: 'Release',
    productWorkflowTag: 'Product',
    recentSuccess: 'Recent Success',
    recentFail: 'Recent Fail',
    averageExecutionTime: 'Average Execution Time',
    successRate: 'Success Rate',
    cancelFavoriteSuccess: 'Cancel Favorite Success',
    addFavoriteSuccess: 'Add Favorite Success',
    customWorkflowsDonotSupportCollections: 'Custom workflows do not currently support collections!',
    releaseWorkflowsDonotSupportCollections: 'Release workflows do not currently support collections!',
    updateBy: 'Update By',
    lastModify: 'Last Modify',
    historyTask: 'Task History',
    runStatus: 'Run Status',
    duration: 'Duration',
    executor: 'Executor',
    env: 'Environment',
    testResults: 'Test Results',
    clone: 'Clone',
    startTask: 'Start Task',
    manualReview: 'Manual Review',
    workflowVars: 'Workflow Variables',
    cancelSuccess: 'Cancel Success',
    jobType: {
      build: 'Build',
      deploy: 'Deploy',
      approval: 'Approval',
      freestyle: 'Common',
      plugin: 'Plugin',
      test: 'Test',
      scan: 'Scan',
      distribute: 'Image Distribute',
      customDeploy: 'Kubernetes Deploy',
      canaryDeploy: 'Canary Deploy',
      canaryConfirm: 'Canary Release',
      blueGreenDeploy: 'blue-green Deploy',
      blueGreenConfirm: 'blue-green Release',
      k8sResourcePatch: 'Kubernetes Resource Patch',
      k8sGrayRollback: 'Gray Rollback',
      grayDeploy: 'Gray Release',
      istioRelease: 'Istio Release',
      istioRollback: 'Istio Rollback'
    },
    imageName: 'Image Name',
    deploymentEnv: 'Deployment Environment',
    deploymentService: 'Deployment Service',
    serviceStatusCheck: 'Service Status Check',
    notOpenServiceStatusCheck: 'Service status detection is not enabled',
    serviceStatusCheckPassed: 'Service status check passed',
    serviceStatusCheckFailed: 'Service status check failed',
    scanName: 'Scan Name',
    link: 'Link',
    view: 'View',
    projectName: 'Project Name',
    fileExport: 'File Export',
    testReport: 'Test Report',
    download: 'Download',
    k8sServiceName: 'K8s Service Name',
    containerName: 'Container Name',
    cluster: 'Cluster',
    namespace: 'Namespace',
    time: 'Time',
    message: 'Message',
    ui: 'UI',
    desc: 'Description',
    jobName: 'Job Name',
    serviceComponent: 'Service Component',
    buildName: 'Build Name',
    buildConfig: 'Build Config',
    varConfig: 'Var Config',
    branchConfig: 'Branch Config',
    storageConfig: 'Storage Config',
    sensitiveInformation: 'Sensitive Information',
    containerStatusDetection: 'Container Status Detection',
    scanConfig: 'Scan Config',
    chooseScan: 'Choose Scan',
    grayPercentage: 'Gray Percentage',
    grayTaskType: 'Gray Task Type',
    resourceName: 'Resource Name',
    updateContent: 'Update Content',
    job: 'Job',
    stage: 'Stage',
    stageName: 'Stage Name',
    concurrentExecution: 'Concurrent Execution',
    preStep: 'pre Step',
    manualApproval: 'Manual Approval',
    approvalWay: 'Approval Way',
    reviewer: 'Reviewer',
    revieweNumber: 'Number of people to be reviewed',
    approvalApplication: 'Approval Application',
    selectApprover: 'Select Approver',
    addStage: 'Add Stage',
    editStage: 'Edit Stage',
    webhookType: 'Webhook Type',
    notifyEvents: 'Notify Events',
    webhookAddr: 'Webhook Addr',
    specifyMembersTip1: '@Designated members (enter the mobile phone number of the designated notification recipient, use ; to split, if it is empty, all members will be notified)',
    specifyMembersTip2: '@Specify members (enter the user_id of the specified notification receiver and use; to split)',
    notifyType: {
      passed: 'passed',
      failed: 'failed',
      timeout: 'timeout',
      cancelled: 'cancelled',
      changed: 'changed',
      reject: 'reject',
      waitforapprove: 'waitforapprove'
    },
    addNotify: 'Add Notify',
    editNotify: 'Edit Notify',
    runPolicy: 'Run Policy',
    shareDirectory: 'Share Directory',
    inputShareDirectory: 'Please input share directory',
    addTrigger: 'Add Trigger',
    editTrigger: 'Edit Trigger',
    targetBranch: 'Target Branch',
    triggerStrategy: 'Trigger Strategy',
    workflowExecutionVariables: 'Workflow Execution Variables',
    triggerEvents: 'Trigger Events',
    baseType: {
      var: 'Variables',
      trigger: 'Trigger',
      notify: 'Notify',
      high: 'High Settings'
    },
    selectService: 'Select Service',
    distributionWay: 'Distribution Way',
    triggerWay: 'Trigger Way',
    timeConfig: 'Time Config',
    workflowParams: 'Workflow Params',
    addTimer: 'Add Timer',
    editTimer: 'Edit Timer',
    cronExpressionAnalysis: 'Cron Expression Analysis',
    addTest: 'Add Test',
    regularExpressionConfiguration: 'Regular Expression Configuration',
    inputRegExpressionConfiguration: 'Please input regular expression configuration',
    selectTargetBranch: 'Please select target branch',
    selectNotifyType: 'Please Select Notify Type',
    inputWechatWebhook: 'Please Input Wechat Webhook',
    inputDingDingWebhook: 'Please Input DingDing Webhook',
    inputFeishuWebhook: 'Please Input Feishu Webhook',
    auditResults: '审核结果',
    auditTime: '审核时间',
    comments: '评论信息'
  },
  webhookType: {
    dingding: 'DingDing',
    wechat: 'Wechat',
    feishu: 'Feishu'
  },
  approvalType: {
    feishu: 'Feishu Approval',
    manualApproval: 'Manual Approval'
  },
  triggerWay: {
    timingCycle: 'Timing Cycle',
    gapCycle: 'Gap Cycle',
    cronExpression: 'Cron Expression'
  },
  productWorkflowSideBar: {
    base: 'Base Info',
    build: 'Build Deploy',
    artifact: 'Artifact',
    test: 'Test',
    distribute: 'Distribute',
    expand: 'Expand',
    trigger: 'Trigger',
    notify: 'Notify'
  },
  resetPolicy: {
    taskCompleted: 'Task Completed',
    deployFailed: 'Deploy Failed',
    testFailed: 'Test Failed'
  },
  productWorkflowStage: {
    buildv2: 'Build',
    build: 'Build Deploy',
    deploy: 'Deploy',
    artifact: 'Artifact Deploy',
    test: 'Test',
    testingv2: 'Test',
    release_image: 'Distribute',
    distribute: 'Distribute Deploy'
  },
  sysSetting: {
    integration: {
      accountsTab: 'Accounts',
      projectTab: 'Project Management',
      gitProvidersTab: 'Git Providers',
      configsTab: 'Config Management',
      jenkinsTab: 'Jenkins',
      sonarTab: 'Sonar',
      approvalSystemTab: 'Approval System',
      otherSystemTab: 'Other System',
      gitProviders: {
        notIntegrated: 'The git provider has not yet been integrated, please integrate the git provider first and then continue.',
        provider: 'Provider',
        otherProvider: 'Other',
        giteeCE: 'Gitee(Community Edition)',
        giteeEE: 'Gitee(Enterprise Edition)',
        providerAlias: 'Alias',
        authStatus: 'Auth status',
        authSuccess: 'Success',
        authFailed: 'Failed',
        lastUpdated: 'Last updated',
        enableProxy: 'Enable proxy',
        editProvider: 'Edit',
        deleteProvider: 'Delete',
        tip: 'GitLab, GitHub, Gerrit, and Gitee integrations are supported,refer to the',
        addProviderTitle: 'Add Provider',
        editProviderTitle: 'Edit Provider',
        referToDoc: 'More configurations can be found in',
        appAuthCallbackTip: 'Callback address for application authorization:',
        appPermissionCheckTip: 'Please check the following permissions: ',
        otherProviderTipFirst: 'Support for standard Git protocol',
        otherProviderTipSecond: 'After integration, build/test templates can pull code from this provider',
        copyAddrSuccess: 'Copied to clipboard',
        copyAddrFailed: 'Copy failed',
        gitlabUrl: 'GitLab URL',
        gerritUrl: 'Gerrit URL',
        giteeUrl: 'Gitee URL',
        providerUrl: 'Provider URL',
        authMethod: 'Auth method',
        username: 'Username',
        password: 'Password',
        selectProvider: 'Please select provider',
        inputAddress: 'Please input URL, including the protocol',
        inputAccessToken: 'Please input access token',
        inputAppId: 'Please input client id',
        inputclientSecret: 'Please input client secret',
        inputUsername: 'Please input username',
        inputPass: 'Please input password',
        inputSSHKey: 'Please input SSH Key',
        inputPrivateAccessToken: 'Please input private access token',
        inputAlias: 'Please input alias',
        inputOtherProviderUrl: 'Please input provider URL',
        checkOtherProviderUrl: 'Please check the format',
        selectAuthMethod: 'Please select the authentication method',
        goToAuthorization: 'Go to authorize',
        proxyIsEnabled: 'Proxy is enabled',
        proxyIsDisabled: 'Proxy is disbaled',
        noProxy: 'No proxy configured, please go to "Settings" -> "Proxy Configuration" to configure proxy first!',
        proxyEnableFailed: 'Proxy configuration change faile:',
        getProxyConfigurationFailed: 'Failed to get proxy configuration:',
        confirmDeleteProvider: 'Are you sure to remove this provider?',
        deleteProviderSuccess: 'Provider has been removed',
        addProviderSuccess: 'Provider has been added',
        changeProviderInfoSuccess: 'Provider has been changed',
        changeProviderInfoSuccessAndGoToAuth: 'Provider has been changed,go to authorize'
      },
      accounts: {
        account: 'Account',
        accountType: 'Type',
        custom: 'Custom'
      }
    },
    packages: {
      addPackage: 'Add package',
      version: 'Version',
      versionExample: 'For example:1.0.0',
      enable: 'Enable',
      enableTooltip: 'Control whether packages are displayed in the package list, those in use are not affected',
      enableCurrentPackage: 'Enable current package',
      packageAddress: 'Package address',
      // eslint-disable-next-line no-template-curly-in-string
      packageAddressTooltip: 'The system automatically downloads and caches the installation package from the configuration address, which is available via the ${FILEPATH} variable',
      installScript: 'Install Script',
      editPackage: 'Edit package-{name} {version}',
      referToDoc: 'When running the build and test steps, install the necessary packages according to the actual business, for details, please refer to',
      enableProxy: 'Enable proxy',
      updateTime: 'Update Time',
      updator: 'Updator',
      inputPackageName: 'Please input package name',
      inputPackageVersion: 'Please input package version',
      inputInstallScript: 'Please input install script',
      inputPackageBinPath: 'Please input package bin path',
      addPackageSuccess: 'Add package successfully',
      addPackageFailed: 'Failed to add package',
      updatePackageSuccess: 'Update package successfully',
      updatePackageFailed: 'Failed to update package',
      packageHasBeenDeleted: 'Package has been deleted',
      cancelDelete: 'Deletion has been canceled',
      deleteTip: 'Deleting a package may affect the workflow being used, are you sure to delete the version {version} of {name}?',
      noProxy: 'No proxy configured, please go to "Settings" -> "Proxy Configuration" to configure proxy first!',
      proxyIsEnabled: 'Proxy is enabled',
      proxyIsDisabled: 'Proxy is disabled',
      changeProxyFailed: 'Failed to change proxy configuration:{error}',
      getProxyConfigurationFailed: 'Failed to get proxy configuration{error}'
    },
    images: {
      addImage: 'Add image',
      label: 'Label',
      imageName: 'Name',
      imageNamePlaceholder: 'repository address/namespace/name:label',
      editImage: 'Edit image',
      referToDoc: 'The project build, test and code scan can use a custom image as the base environment image, the custom image needs to add some necessary packages, for details, please refer to',
      inputLabel: 'Please input image label',
      inputImageName: 'Please input image name',
      deleteTip: 'Are you sure to delete the image {label}?',
      confirm: 'Confirm',
      imageHasBeenDeleted: 'Image has been deleted',
      addImageSuccess: 'Add image successfully',
      updateImageSuccess: 'Update image successfully'
    },
    plugins: {},
    registry: {},
    storage: {},
    helmRepo: {
      addHelmChartRepo: 'Add helm chart repo',
      editHelmChartRepo: 'Edit helm chart repo',
      urlPlaceholder: 'Please enter the URL starting with http/https/acr',
      repoName: 'Repo Name',
      inputRepoName: 'Please input repo name',
      username: 'Username',
      inputUsername: 'Please input username',
      inputPassword: 'Please input password',
      password: 'Password',
      referToDoc: 'Support the integration of self-built Harbor repository and Chart repository provided by Alibaba Cloud, Tencent Cloud, Huawei Cloud and other cloud vendors, for details, please refer to',
      lastModified: 'Last modified',
      protocolCheck: 'Please make sure the protocol starts with http/https/acr',
      inputUrl: 'Please input URL',
      deleteTip: 'Are you sure to delete the repo {repoName} ?',
      confirm: 'Confirm',
      repoHasBeenDeleted: 'Repo has been deleted',
      addRepoSuccess: 'Add repo successfully',
      updateRepoSuccess: 'Update repo successfully'
    },
    clusters: {},
    hosts: {},
    settings: {},
    users: {
      users: 'Users',
      systemRoles: 'System Roles',
      addUser: 'Add user',
      username: 'Username',
      password: 'Password',
      mail: 'Mail',
      nickname: 'Nickname',
      phone: 'Phone',
      role: 'Role',
      selectRole: 'Please select role',
      searchUser: 'Search user',
      inputNickname: 'Please input nickname',
      userRegistration: 'User registration',
      admin: 'Admin',
      loginInfo: 'Login info',
      notLoggedIn: 'Not logged in',
      source: 'Source',
      inputUsername: 'Please input username',
      inputMail: 'Please enter login email',
      checkMail: 'Please check the email address',
      inputPassword: 'Please input password',
      deleteUserTip: 'Are you sure to delete {type} user {name} ',
      tip: 'Tip',
      identityTypeSystem: 'System',
      userHasBeenDeleted: 'User has been deleted',
      cancelDelete: 'Deletion has been canceled',
      addImageSuccess: 'Add user successfully',
      changeUserRegistrationStatusSuccess: 'Change user registration status successfully',
      roleTip: 'Define system-level roles including data overview, insights, test center, delivery center, and permission control for template library',
      roleName: 'Role Name',
      roleDesc: 'Role Desc',
      permissionList: 'Permission List',
      deleteRoleTip: 'The member permission of this role will also be deleted, so please delete carefully',
      deleteRoleConfirm: 'Are you sure to delete the system role {name}',
      roleHasBeenDeleted: 'Role has been deleted successfully',
      inputRoleName: 'Please input role name',
      roleNameCheck: 'Only lowercase letters and numbers are supported for role name, and only hyphens are supported for special characters',
      addRoleSuccess: 'Add role successfully',
      updateRoleSuccess: 'Update role successfully',
      updateUserSuccess: 'Update user info successfully',
      updateUserInfoDialogTitle: 'Edit info of {name} '
    },
    announcement: {
      addAnnouncement: 'Add announcement',
      title: 'Title',
      priority: 'Priority',
      selectPriority: 'Please select priority',
      high: 'High',
      medium: 'Medium',
      low: 'Low',
      timeRange: 'Time Range',
      startTime: 'Start time',
      timeTo: 'To',
      endTime: 'End time',
      content: 'Content',
      editAnnouncement: 'Edit announcement',
      inputTitle: 'Please input title',
      inputContent: 'Please input content',
      selectStartTimeAndEndTime: 'Please select the start and end time',
      announcementHasBeenDeleted: 'Announcement has been deleted',
      addAnnouncementSuccess: 'Announcement has been successfully added',
      addAnnouncementFailed: 'Failed to add announcement',
      editAnnouncementSuccess: 'Announcement has been successfully edited',
      editAnnouncementFailed: 'Failed to edit announcement'
    },
    auditLog: {
      APIPayloadDialogTitle: 'API Payload: {time}',
      noPayload: 'No payload',
      selectType: 'Please select type',
      username: 'Username',
      project: 'Project',
      function: 'Function',
      statusCode: 'Status Code',
      inputKeyword: 'Please input keyword to search',
      search: 'Search',
      time: 'Time',
      detail: 'Detail',
      APIPayload: 'API Payload',
      searchCompleted: 'Search completed'
    }
  },
  testing: {
    title: 'Test',
    noTestsErrorMessage: 'There are no test cases, please create one.',
    searchTests: 'Search tests',
    caseCount: 'Case Count',
    executionCount: 'Execution Count',
    averageExecutionTime: 'Average Duration',
    successRate: 'Success Rate',
    creationSuccess: 'Task created.',
    restartSuccess: 'Task restarted.',
    cancellationSuccess: 'Task cancelled.',
    deletionConfirmation: 'Are you sure you want to delete {name}?',
    deletionSuccess: 'Test case deleted.',
    triggers: {
      workflowTriggers: 'Workflow Triggers',
      selectWorkflowTriggers: 'Create workflow triggers',
      selectWorkflowTriggersII: 'Please select workflow triggers, you can type in to search for workflows',
      creationSuccess: 'Workflow trigger created.',
      deletion: 'Delete workflow triggers',
      deletionSuccess: 'Workflow trigger deleted.',
      deletionCancellation: 'Deletion cancelled.',
      deletionConfirmation: 'Are you sure you want to delete trigger from workflow {name} ?'
    },
    details: {
      name: 'Test name',
      description: 'Description',
      parameters: 'Parameters',
      scripts: 'Script',
      report: {
        configuration: 'Test Report Configuration',
        junitReportDirectory: 'Junit Report Directory',
        htmlReportFileDirectory: 'HTML Report Filepath',
        htmlReportFileTooltip: 'HTML report file link will be sent with the IM message notification.'
      },
      advancedSettings: {
        title: 'Advanced Settings',
        exportReport: {
          title: 'Report Export',
          filePath: 'File Path',
          filePathExplanation: 'Choose directories to be downloaded in the test task detail page. It is commonly used for the export of the test log files.'
        },
        hooksAndNotification: {
          title: 'Hooks and Notifications',
          webhookTitle: 'Webhooks',
          timerTitle: 'Timers',
          notificationTitle: 'Notifications'
        }
      }
    },
    taskDetails: {
      exportArtifact: 'Artifact Export',
      basicInformation: {
        title: 'Basic Information',
        creator: 'Creator',
        canceller: 'Canceller',
        duration: 'Duration',
        retry: 'Retry',
        cancel: 'Cancel'
      },
      taskInfo: {
        head: 'Test Tasks',
        executionStatus: 'Status',
        report: 'Test Reports',
        view: 'View',
        exportedFile: 'Exported files',
        download: 'Download',
        status: 'Status',
        errorMessage: 'Error message',
        acknowledged: 'Acknowledged'
      },
      report: {
        overview: 'Test Report Overview',
        caseDetails: 'Case Details'
      },
      cases: {
        description: 'Description',
        result: 'Test Result',
        executionTime: 'Duration(s)'
      },
      logs: {
        fetchErrorMessage: 'Failed to fetch test logs.'
      }
    },
    validation: {
      testNameInsertionPrompt: 'Type in the test name.',
      testNameVaidationError: 'Name should only contain lowercase alphanumeric characters, - or _',
      testDescriptionInsertionPrompt: 'Type in the description',
      testReportDirectoryInsertionPrompt: 'Type in the directory for test report',
      testReportFileInsertionPrompt: 'Type in the filepath for the test report'
    },
    summary: {
      latest: 'Latest Test Report',
      caseCount: 'Total test cases',
      successCount: 'Success cases',
      failCount: 'Failed cases',
      errorCount: 'Error cases',
      unstartCount: 'Unstart cases',
      timeConsumption: 'Duration',
      checkCases: 'View',
      caseDetails: 'Case Details'
    },
    history: {
      title: 'History'
    },
    status: {
      success: 'Success',
      fail: 'Fail',
      unstart: 'Unstart',
      error: 'Error'
    },
    display: {
      failReason: 'Fail Reason:',
      failMessage: 'Fail Message:',
      failDetail: 'Fail Detail:',
      standardOut: 'Standard Output:',
      errorMessage: 'Error message:',
      errorDetail: 'Error detail:',
      errorType: 'Error type:'
    }
  },
  scanning: {
    title: 'Code Scanning',
    titleWithScanName: 'Code Scanning {name}',
    taskCreationSuccess: 'Scanning task Created',
    executor: 'Executor',
    canceller: 'Canceller',
    cancelTask: 'Cancel',
    timesRun: 'Times Run',
    averageDuration: 'Average Duration',
    taskStatus: 'Status',
    resultLink: 'Link',
    viewResultLink: 'View',
    advancedSettings: {
      title: 'Advanced Settings',
      hooksAndNotification: {
        title: 'Hooks and Notifications',
        webhookTitle: 'Webhooks'
      }
    },
    details: {
      basicInformation: 'Basic Information',
      description: 'Description',
      scanner: 'Scanner',
      scannerTypeOther: 'Other',
      image: 'Basic Image',
      packages: 'Packages',
      sonarAddress: 'Sonar Host',
      parameters: 'Sonar Parameter',
      preScanScript: 'Pre-scan Script',
      qualityGate: 'Quality Gate',
      scanningScript: 'Scanning Script'
    },
    prompt: {
      timeMismatch: 'Local time and server time mismatch, please sync time with the server.',
      inputScanningName: 'Type in scanning name',
      scanningNamingConvention: 'Name should only contain lowercase alphanumeric characters and -',
      inputDescription: 'Type in scanning description',
      chooseScanner: 'Select scanner',
      chooseImage: 'Select scanning basic image',
      imageCannotBeEmpty: 'Image cannot be empty',
      createImage: 'Create custom basic image',
      packageCannotBeEmpty: 'Package cannot be empty',
      selectSonarAddress: 'Select sonar host',
      sonarAddressCannotBeEmpty: 'Sonar host cannot be empty',
      sonarParameterPopup: 'Sonar host and token will automatically be injected during the execution of the task.',
      qualityGatePopup: 'Scanning task will fail if the scanning doesn\'t pass the quality gate',
      editConfirmation: 'Update',
      deleteConfirmation: 'Are you sure you want to delete scanning {scanningName}?',
      createNow: 'Create',
      created: 'Scanning {name} created!',
      updated: 'Scanning {name} updated！',
      deleted: 'Deleted',
      canceled: 'Scanning task cancelled',
      restarted: 'Scanning task restarted',
      searchForScanning: 'Search for scanning',
      noScanning: 'There are no scanning in this project, please create or update one.'
    }
  },
  repository: {
    prompt: {
      chooseBranchOrTag: 'Choose branch or tag',
      inputBranchOrTag: 'Input branch or tag',
      chooseBranch: 'Choose branch',
      getBranchErrorInputBranch: 'Failed to get branch info, please type in your branch',
      inputBranch: 'Input branch',
      choosePR: 'Choose pull request',
      inputPR: 'Input Pull Request ID',
      prDoesNotExist: 'Pull request doesn\'t exist. Type in the pull request ID. You can use comma to separate multiple requests',
      usePRorTagTemplate: 'Use '
    },
    info: {
      creatorTemplate: 'Creator: ',
      creationTimeTemplate: 'Create Time: ',
      sourceBranchTemplate: 'Source Branch: ',
      targetBranchTemplate: 'Target Branch: '
    }
  }
}
